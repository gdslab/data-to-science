"""add raw_data_id to file_permissions for raw data visibility control

Revision ID: c186d6643f9f
Revises: 13b80df8f03f
Create Date: 2025-10-28 18:10:22.227270

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = 'c186d6643f9f'
down_revision: str | None = '13b80df8f03f'
branch_labels: str | None = None
depends_on: str | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add raw_data_id column for RawData file permissions
    op.add_column('file_permissions', sa.Column('raw_data_id', sa.UUID(), nullable=True))

    # Create unique constraint on raw_data_id
    op.create_unique_constraint('unique_raw_data_id_file_permissions', 'file_permissions', ['raw_data_id'])

    # Create foreign key to raw_data table
    op.create_foreign_key('fk_file_permissions_raw_data', 'file_permissions', 'raw_data', ['raw_data_id'], ['id'])

    # Add check constraint to ensure at least one ID (file_id OR raw_data_id) is present
    op.create_check_constraint(
        'check_at_least_one_file_type',
        'file_permissions',
        '(file_id IS NOT NULL) OR (raw_data_id IS NOT NULL)'
    )

    # Backfill: Create file_permissions for all existing raw_data that don't have one
    connection = op.get_bind()
    connection.execute(
        text("""
            INSERT INTO file_permissions (id, raw_data_id, is_public, created_at, last_accessed_at, expires_at)
            SELECT
                gen_random_uuid(),
                rd.id,
                false,
                rd.created_at,
                rd.created_at,
                rd.created_at + INTERVAL '7 days'
            FROM raw_data rd
            LEFT JOIN file_permissions fp ON fp.raw_data_id = rd.id
            WHERE fp.id IS NULL
        """)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove all file_permissions associated with raw_data (backfilled records)
    connection = op.get_bind()
    connection.execute(
        text("""
            DELETE FROM file_permissions
            WHERE raw_data_id IS NOT NULL
        """)
    )

    # Drop check constraint
    op.drop_constraint('check_at_least_one_file_type', 'file_permissions', type_='check')

    # Drop foreign key
    op.drop_constraint('fk_file_permissions_raw_data', 'file_permissions', type_='foreignkey')

    # Drop unique constraint
    op.drop_constraint('unique_raw_data_id_file_permissions', 'file_permissions', type_='unique')

    # Drop raw_data_id column
    op.drop_column('file_permissions', 'raw_data_id')
    # ### end Alembic commands ###
