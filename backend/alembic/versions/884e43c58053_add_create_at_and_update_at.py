"""add-create-at-and-update-at

Revision ID: 884e43c58053
Revises: ed7ed7c6e456
Create Date: 2025-09-05 20:39:22.628012

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "884e43c58053"
down_revision: str | None = "ed7ed7c6e456"
branch_labels: str | None = None
depends_on: str | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Add columns as nullable first
    op.add_column(
        "data_products",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "data_products",
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "flights", sa.Column("created_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column(
        "flights", sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column(
        "projects", sa.Column("created_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column(
        "projects", sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column(
        "raw_data", sa.Column("created_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column(
        "raw_data", sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True)
    )

    # Update existing records with current timestamp
    op.execute(
        "UPDATE data_products SET created_at = TIMEZONE('utc', CURRENT_TIMESTAMP), updated_at = TIMEZONE('utc', CURRENT_TIMESTAMP) WHERE created_at IS NULL"
    )
    op.execute(
        "UPDATE flights SET created_at = TIMEZONE('utc', CURRENT_TIMESTAMP), updated_at = TIMEZONE('utc', CURRENT_TIMESTAMP) WHERE created_at IS NULL"
    )
    op.execute(
        "UPDATE projects SET created_at = TIMEZONE('utc', CURRENT_TIMESTAMP), updated_at = TIMEZONE('utc', CURRENT_TIMESTAMP) WHERE created_at IS NULL"
    )
    op.execute(
        "UPDATE raw_data SET created_at = TIMEZONE('utc', CURRENT_TIMESTAMP), updated_at = TIMEZONE('utc', CURRENT_TIMESTAMP) WHERE created_at IS NULL"
    )

    # Make columns non-nullable and set server defaults
    op.alter_column(
        "data_products",
        "created_at",
        nullable=False,
        server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
    )
    op.alter_column(
        "data_products",
        "updated_at",
        nullable=False,
        server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
    )
    op.alter_column(
        "flights",
        "created_at",
        nullable=False,
        server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
    )
    op.alter_column(
        "flights",
        "updated_at",
        nullable=False,
        server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
    )
    op.alter_column(
        "projects",
        "created_at",
        nullable=False,
        server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
    )
    op.alter_column(
        "projects",
        "updated_at",
        nullable=False,
        server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
    )
    op.alter_column(
        "raw_data",
        "created_at",
        nullable=False,
        server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
    )
    op.alter_column(
        "raw_data",
        "updated_at",
        nullable=False,
        server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
    )

    # Add onupdate trigger for updated_at columns
    op.execute(
        "CREATE OR REPLACE FUNCTION update_updated_at_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = TIMEZONE('utc', CURRENT_TIMESTAMP); RETURN NEW; END; $$ language 'plpgsql'"
    )

    op.execute(
        "CREATE TRIGGER update_data_products_updated_at BEFORE UPDATE ON data_products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()"
    )
    op.execute(
        "CREATE TRIGGER update_flights_updated_at BEFORE UPDATE ON flights FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()"
    )
    op.execute(
        "CREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON projects FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()"
    )
    op.execute(
        "CREATE TRIGGER update_raw_data_updated_at BEFORE UPDATE ON raw_data FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop triggers first
    op.execute("DROP TRIGGER IF EXISTS update_raw_data_updated_at ON raw_data")
    op.execute("DROP TRIGGER IF EXISTS update_projects_updated_at ON projects")
    op.execute("DROP TRIGGER IF EXISTS update_flights_updated_at ON flights")
    op.execute(
        "DROP TRIGGER IF EXISTS update_data_products_updated_at ON data_products"
    )

    # Drop the function
    op.execute("DROP FUNCTION IF EXISTS update_updated_at_column()")

    # Drop columns
    op.drop_column("raw_data", "updated_at")
    op.drop_column("raw_data", "created_at")
    op.drop_column("projects", "updated_at")
    op.drop_column("projects", "created_at")
    op.alter_column(
        "project_members", "project_id", existing_type=sa.UUID(), nullable=True
    )
    op.drop_column("flights", "updated_at")
    op.drop_column("flights", "created_at")
    op.drop_column("data_products", "updated_at")
    op.drop_column("data_products", "created_at")
    # ### end Alembic commands ###
